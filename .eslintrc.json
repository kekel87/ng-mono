{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "extends": ["eslint:recommended"],
      "rules": {
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],
        "no-console": [
          "warn",
          {
            "allow": ["error"]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "parserOptions": {
        "project": ["apps/*/tsconfig.*?.json", "lib/*/tsconfig.*?.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@nx/typescript",
        "plugin:@typescript-eslint/recommended",
        "plugin:prettier/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "plugins": ["unused-imports"],
      "settings": {
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true,
            "project": ["apps/*/tsconfig.*?.json", "lib/*/tsconfig.*?.json"]
          }
        }
      },
      "rules": {
        "@typescript-eslint/naming-convention": [
          "error",
          // Default config: https://typescript-eslint.io/rules/naming-convention#options
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          // Enforce enum member to PascalCase, https://www.typescriptlang.org/docs/handbook/enums.html#handbook-content
          {
            "selector": "enumMember",
            "format": ["PascalCase"]
          },
          // Allow leading underscore on private property, because we have a lot ...
          {
            "selector": "classProperty",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          // Allow readonly with enum `readonly LogoColor = LogoColor;`
          {
            "selector": "classProperty",
            "modifiers": ["readonly"],
            "format": ["camelCase", "PascalCase", "UPPER_CASE"]
          },
          // Required leading underscore for unused parameter, and disallow only underscore unused var
          {
            "selector": "parameter",
            "modifiers": ["unused"],
            "format": ["camelCase"],
            "leadingUnderscore": "require",
            "custom": {
              "regex": "^_*$",
              "match": false
            }
          },
          // Allow underscore and handle conflic with @typescript-eslint/no-unused-vars: "ignoreRestSiblings": true
          {
            "selector": "parameter",
            "modifiers": ["destructured", "unused"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "vars": "all",
            "args": "all",
            "ignoreRestSiblings": true
          }
        ],
        "unused-imports/no-unused-imports": "error",
        "import/order": [
          "error",
          {
            "groups": [["external", "builtin", "type"], ["internal"], ["index", "parent", "sibling"], ["object"]],
            "newlines-between": "always",
            "alphabetize": {
              "order": "asc"
            }
          }
        ]
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"],
      "rules": {}
    },
    {
      "files": ["*.spec.ts", "*.spec.tsx", "*.spec.js", "*.spec.jsx"],
      "env": {
        "jest": true
      },
      "rules": {}
    }
  ]
}
